{"version":3,"sources":["../deline.js"],"names":[],"mappings":"AAAA,SAAS,MAAT,CAAgB,OAAhB,EAAoC;AAClC,MAAI,YAAJ;AACA,MAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAM,CAAC,OAAD,CAAN;AACD,GAFD,MAEO;AACL,UAAM,QAAQ,GAAd;AACD;AACD,MAAM,YAAY,EAAlB;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,IAAI,MAAxB,EAAgC,GAAhC,EAAqC;AACnC,cAAU,IAAV,CAAe,IAAI,CAAJ,EAAO,OAAP,CAAe,aAAf,EAA8B,EAA9B,EAAkC,OAAlC,CAA0C,MAA1C,EAAkD,GAAlD,CAAf;AACA,QAAI,sDAAJ,EAAuB;AACrB,gBAAU,IAAV,qBAAsB,CAAtB,6BAAsB,CAAtB;AACD;AACF;AACD,MAAM,SAAS,UAAU,IAAV,CAAe,EAAf,EAAmB,IAAnB,EAAf;;AAEA,MAAM,QAAQ,OAAO,KAAP,CAAa,IAAb,CAAd;AACA,MAAM,MAAM,MAAM,MAAN,CAAa,UAAC,WAAD,EAAc,IAAd,EAAoB,GAApB,EAA4B;AACnD,QAAM,cAAc,KAAK,IAAL,EAApB;AACA,QAAI,YAAY,MAAZ,GAAqB,CAArB,IAA0B,gBAAgB,EAA1C,IAAgD,YAAY,YAAY,MAAxB,MAAoC,IAAxF,EAA8F;AAC5F,aAAO,WAAP;AACD;AACD,QAAI,gBAAgB,EAApB,EAAwB;AACtB,kBAAY,IAAZ,CAAiB,YAAY,GAAZ,GAAkB,KAAlB,CAAwB,CAAxB,EAA2B,CAAC,CAA5B,CAAjB;AACA,kBAAY,IAAZ,CAAiB,IAAjB;AACD,KAHD,MAGO;AACL,kBAAY,IAAZ,aAAoB,WAApB,KAAkC,QAAQ,MAAM,MAAN,GAAe,CAAvB,GAA2B,GAA3B,GAAiC,EAAnE;AACD;AACD,WAAO,WAAP;AACD,GAZW,EAYT,EAZS,CAAZ;AAaA,SAAO,IAAI,IAAJ,CAAS,EAAT,EAAa,IAAb,GAAoB,OAApB,CAA4B,MAA5B,EAAoC,IAApC,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,MAAjB","file":"deline.js","sourcesContent":["function deline(strings, ...values) {\n  let raw;\n  if (typeof strings === 'string') {\n    raw = [strings];\n  } else {\n    raw = strings.raw;\n  }\n  const resultArr = [];\n  for (let i = 0; i < raw.length; i++) {\n    resultArr.push(raw[i].replace(/\\\\\\n[ \\t]*/g, '').replace(/\\\\`/g, '`'));\n    if (i < values.length) {\n      resultArr.push(values[i]);\n    }\n  }\n  const result = resultArr.join('').trim();\n\n  const lines = result.split('\\n');\n  const ret = lines.reduce((accumulator, line, idx) => {\n    const lineTrimmed = line.trim();\n    if (accumulator.length > 0 && lineTrimmed === '' && accumulator[accumulator.length] === '\\n') {\n      return accumulator;\n    }\n    if (lineTrimmed === '') {\n      accumulator.push(accumulator.pop().slice(0, -1));\n      accumulator.push('\\n');\n    } else {\n      accumulator.push(`${lineTrimmed}${idx !== lines.length - 1 ? ' ' : ''}`);\n    }\n    return accumulator;\n  }, []);\n  return ret.join('').trim().replace(/\\\\n/g, '\\n');\n}\n\nmodule.exports = deline;\n"]}