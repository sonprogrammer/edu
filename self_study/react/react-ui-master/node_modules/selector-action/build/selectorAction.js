"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

function selectorAction() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (args.length === 0) {
    throw new Error('selectorAction called with no arguments');
  } // actionCreator: takes selector results as arguments, returns a Redux action


  var actionCreator = args[args.length - 1]; // Selectors: functions of state -> any. May be passed in as a single array or multiple arguments.

  var selectors;

  if (args.length === 2 && Array.isArray(args[0])) {
    selectors = args[0];
  } else {
    selectors = args.slice(0, args.length - 1);
  }

  if (typeof actionCreator !== 'function') {
    throw new Error('Action creators must be functions');
  }

  selectors.forEach(function (selector) {
    if (typeof selector !== 'function') {
      throw new Error('Selectors must be functions');
    }
  });

  var generatedActionCreator = function generatedActionCreator(dispatchArg, getStateArg) {
    var action = function internalGeneratedSelectorAction(dispatch, getState) {
      var state = getState();
      var appliedSelectors = selectors.map(function (selector) {
        return selector(state);
      });
      return dispatch(actionCreator.apply(void 0, (0, _toConsumableArray2["default"])(appliedSelectors).concat([state])));
    };

    action.IS_SELECTOR_ACTION = true; // If this action creator is called as a thunk, we can dispatch directly.

    if (dispatchArg && getStateArg) {
      return action(dispatchArg, getStateArg);
    } // Otherwise this is a bonafide action creator which returns a thunk action


    return action;
  }; // expose the original action creator for testing


  generatedActionCreator.originalActionCreator = actionCreator;
  generatedActionCreator.IS_SELECTOR_ACTION = true;
  return generatedActionCreator;
}

module.exports = selectorAction;
//# sourceMappingURL=selectorAction.js.map